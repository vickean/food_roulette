c
n
@client_token
c
n
nn
n
nn
n
@payment
@client_token
@client-token
c
params[:payment][:num_token]
params
params[:num_token]
new_party
c
@restaurant
n
c
n
c
Party.affordable(spin)
spin = current_user.spin_num
Party.affordable(spin)
current_user.save
current_user.spin_num = 100
current_user
Party.affordable(spin)
Party.select_random_party(lat, long, spin, date)
n
c
x
n
@party
y
n
@restaurant
@party
c
n
c
n
x
n
x
n
x
y.no_of_guests
y
n
@restaurant
c
@restaurant
c
@party
@restaurants
n
c
n
c
@party
n
@restaurants
c
@party
n
@restaurants
@restaurant
c
@party
n
@restaurants
@party
c
result_restaurants
c
n
test
exit
affordable(spin)
suitable_date(date)
suitable_date
date
spin
test
nearby_restaurants
a
test
final_array
c
booking_path
party_booking_path(:booking_id => @booking.id, :party_id => @party.id)
party_booking_path
@booking.id
@booking
c
affordable(spin).suitable_date(date).find_by(restaurant_id: nearby_restaurants)
affordable(spin).suitable_date(date)
affordable(spin)
nearby_restaurants
n
c
date.datetime.to_date == Party.first.datetime.to_date
date.datetime.to_date == Party.first.datetime
date.datetime.to_date == Party.first.datetime.to_date
date.datetime.to_date
Party.first.datetime
date.datetime
date.datetime == Party.first.datetime
date.datetime <=> Party.first.datetime
date.datetime.to_datetime.date
date.datetime.to_datetime
date.datetime
date
Party.first
Party.all
d = Restaurant.third
d = Restaurant.third.datetime
date.datetime
date.datetime.class.methods
date.datetime.class.method_names
date.datetime.class
date.datetime
date.date
date
date = Party.new(party_params)
date
c
Party.new(params[:party])
Part.new(params[:party])
params[:party]
params[:party][:datetime]
params[:party]['datetime(1i)']
params[:party]
params[:party][:datetime]
party_params
params[:party][:datetime]
params[:datetime]
params
date
c
params
self.suitable_date(date)
self.suitable_date(date0
date
Party.affordable(spin).suitable_date(date)
Party.affordable(spin)
nearby_restaurants
n
c
Party.affordable(spin)
spin
Party.all
nearby_restaurants
n
c
Party.joins(:restaurant).where('restaurants.price_tier < ?', 10)
Party.joins(:restaurants).where('restaurants.price_tier < ?', 10)
Party.create(restaurant_id: 3, number_of_people: 6, party_name: 'foobar', datetime: DateTime.now)
DateTime.now
Party.create(restaurant_id: 3, number_of_people: 6, party_name: 'foobar', datetime: 
Party.create(restaurant_id: 3, number_of_people: 6, party_name: 
Party.joins(:restaurant)
Party.joins(:restaurant).all
Party.joins(:restaurant)
Party.joins(:restaurant).where('restaurants.price_tier < ?', -1)
Party.column_names
Party.all
Party.joins(:restaurant).where('restaurants.price_tier < ?', -1)
Party.joins(:restaurant).where('restaurants.price_tier < ?', 0)
Party.joins(:restaurant).where('restaurants.price_tier < ?', 1)
Party.joins(:restaurant).where('restaurants.price_tier < ?', 10)
Party.joins(:restaurant).where('restaurants.price_tier < ?', spin)
Party.joins(:restaurants).where('restaurants.price_tier < ?', spin)
Restaurant.where('price_tier < ?', 10)
Party.joins(:restaurants).where('restaurants.price_tier < ?', spin)
a.errors
a.save
a.price_tier = 10
a = Restaurant.second
a = Restaurant.second.price_tier = 10
Restaurant.second
Restaurant.second.price_tier = 10
Restaurant.second
Restaurant.where('price_tier = ?', 10)
Restaurant.where('restaurants.price_tier = ?', 10)
Party.joins(:restaurants).where('restaurants.price_tier = ?', 10)
Party.joins(:restaurants).where('restaurants.price_tier = ?', spin)
Restaurant.all
self.affordable(spin).suitable_date(date).where(restaurant_id: nearby_restaurants)
Party.affordable(spin)
Party.join(:restaurants)
self.all
self
self.affordable(spin)
self.affordable(spin).suitable_date(date).where(restaurant_id: nearby_restaurants)[0]
self.affordable(spin).suitable_date(date).where(restaurant_id: nearby_restaurants)
self.affordable(spin).suitable_date(date).where(restaurant_id: nearby_restaurants).each {|x| puts x}
self.affordable(spin).suitable_date(date).where(restaurant_id: nearby_restaurants)
self.affordable(spin).suitable_date(date).where(restaurant_id: nearby_restaurants).all
self.affordable(spin).suitable_date(date).where(restaurant_id: nearby_restaurants)
c
affordable(spin).suitable_date(date)
affordable(spin)
n
c
spin
affordable(spin)
n = Restaurant.near([lat, long], 1).pluck(:id)
date
spin
long
lat
c
n
spin
n
c
exit
nearby_restaurants
n
nearby_restaurants
c
restaurants.price_tier
:affordable
spin
c
spin
c
n
c
n
@user
n
@user
@usser
c
@user.save
>>>>>>> master
c
params[:num_token]
params
c
params
c
params
c
params
c
params
c
params
c
params
